
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model authModel
 * 
 */
export type authModel = $Result.DefaultSelection<Prisma.$authModelPayload>
/**
 * Model postModel
 * 
 */
export type postModel = $Result.DefaultSelection<Prisma.$postModelPayload>
/**
 * Model commentModel
 * 
 */
export type commentModel = $Result.DefaultSelection<Prisma.$commentModelPayload>
/**
 * Model replyModel
 * 
 */
export type replyModel = $Result.DefaultSelection<Prisma.$replyModelPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more AuthModels
 * const authModels = await prisma.authModel.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more AuthModels
   * const authModels = await prisma.authModel.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.authModel`: Exposes CRUD operations for the **authModel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuthModels
    * const authModels = await prisma.authModel.findMany()
    * ```
    */
  get authModel(): Prisma.authModelDelegate<ExtArgs>;

  /**
   * `prisma.postModel`: Exposes CRUD operations for the **postModel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostModels
    * const postModels = await prisma.postModel.findMany()
    * ```
    */
  get postModel(): Prisma.postModelDelegate<ExtArgs>;

  /**
   * `prisma.commentModel`: Exposes CRUD operations for the **commentModel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommentModels
    * const commentModels = await prisma.commentModel.findMany()
    * ```
    */
  get commentModel(): Prisma.commentModelDelegate<ExtArgs>;

  /**
   * `prisma.replyModel`: Exposes CRUD operations for the **replyModel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReplyModels
    * const replyModels = await prisma.replyModel.findMany()
    * ```
    */
  get replyModel(): Prisma.replyModelDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.2.0
   * Query Engine version: 61e140623197a131c2a6189271ffee05a7aa9a59
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    authModel: 'authModel',
    postModel: 'postModel',
    commentModel: 'commentModel',
    replyModel: 'replyModel'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'authModel' | 'postModel' | 'commentModel' | 'replyModel'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      authModel: {
        payload: Prisma.$authModelPayload<ExtArgs>
        fields: Prisma.authModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.authModelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.authModelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload>
          }
          findFirst: {
            args: Prisma.authModelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.authModelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload>
          }
          findMany: {
            args: Prisma.authModelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload>[]
          }
          create: {
            args: Prisma.authModelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload>
          }
          createMany: {
            args: Prisma.authModelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.authModelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload>
          }
          update: {
            args: Prisma.authModelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload>
          }
          deleteMany: {
            args: Prisma.authModelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.authModelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.authModelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload>
          }
          aggregate: {
            args: Prisma.AuthModelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAuthModel>
          }
          groupBy: {
            args: Prisma.authModelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AuthModelGroupByOutputType>[]
          }
          count: {
            args: Prisma.authModelCountArgs<ExtArgs>,
            result: $Utils.Optional<AuthModelCountAggregateOutputType> | number
          }
        }
      }
      postModel: {
        payload: Prisma.$postModelPayload<ExtArgs>
        fields: Prisma.postModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.postModelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.postModelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postModelPayload>
          }
          findFirst: {
            args: Prisma.postModelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.postModelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postModelPayload>
          }
          findMany: {
            args: Prisma.postModelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postModelPayload>[]
          }
          create: {
            args: Prisma.postModelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postModelPayload>
          }
          createMany: {
            args: Prisma.postModelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.postModelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postModelPayload>
          }
          update: {
            args: Prisma.postModelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postModelPayload>
          }
          deleteMany: {
            args: Prisma.postModelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.postModelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.postModelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postModelPayload>
          }
          aggregate: {
            args: Prisma.PostModelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePostModel>
          }
          groupBy: {
            args: Prisma.postModelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PostModelGroupByOutputType>[]
          }
          count: {
            args: Prisma.postModelCountArgs<ExtArgs>,
            result: $Utils.Optional<PostModelCountAggregateOutputType> | number
          }
        }
      }
      commentModel: {
        payload: Prisma.$commentModelPayload<ExtArgs>
        fields: Prisma.commentModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.commentModelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.commentModelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentModelPayload>
          }
          findFirst: {
            args: Prisma.commentModelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.commentModelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentModelPayload>
          }
          findMany: {
            args: Prisma.commentModelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentModelPayload>[]
          }
          create: {
            args: Prisma.commentModelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentModelPayload>
          }
          createMany: {
            args: Prisma.commentModelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.commentModelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentModelPayload>
          }
          update: {
            args: Prisma.commentModelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentModelPayload>
          }
          deleteMany: {
            args: Prisma.commentModelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.commentModelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.commentModelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentModelPayload>
          }
          aggregate: {
            args: Prisma.CommentModelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCommentModel>
          }
          groupBy: {
            args: Prisma.commentModelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentModelGroupByOutputType>[]
          }
          count: {
            args: Prisma.commentModelCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentModelCountAggregateOutputType> | number
          }
        }
      }
      replyModel: {
        payload: Prisma.$replyModelPayload<ExtArgs>
        fields: Prisma.replyModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.replyModelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$replyModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.replyModelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$replyModelPayload>
          }
          findFirst: {
            args: Prisma.replyModelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$replyModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.replyModelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$replyModelPayload>
          }
          findMany: {
            args: Prisma.replyModelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$replyModelPayload>[]
          }
          create: {
            args: Prisma.replyModelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$replyModelPayload>
          }
          createMany: {
            args: Prisma.replyModelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.replyModelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$replyModelPayload>
          }
          update: {
            args: Prisma.replyModelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$replyModelPayload>
          }
          deleteMany: {
            args: Prisma.replyModelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.replyModelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.replyModelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$replyModelPayload>
          }
          aggregate: {
            args: Prisma.ReplyModelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReplyModel>
          }
          groupBy: {
            args: Prisma.replyModelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReplyModelGroupByOutputType>[]
          }
          count: {
            args: Prisma.replyModelCountArgs<ExtArgs>,
            result: $Utils.Optional<ReplyModelCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AuthModelCountOutputType
   */

  export type AuthModelCountOutputType = {
    posts: number
  }

  export type AuthModelCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    posts?: boolean | AuthModelCountOutputTypeCountPostsArgs
  }

  // Custom InputTypes

  /**
   * AuthModelCountOutputType without action
   */
  export type AuthModelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthModelCountOutputType
     */
    select?: AuthModelCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AuthModelCountOutputType without action
   */
  export type AuthModelCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: postModelWhereInput
  }



  /**
   * Models
   */

  /**
   * Model authModel
   */

  export type AggregateAuthModel = {
    _count: AuthModelCountAggregateOutputType | null
    _min: AuthModelMinAggregateOutputType | null
    _max: AuthModelMaxAggregateOutputType | null
  }

  export type AuthModelMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    image: string | null
    imageID: string | null
    token: string | null
    verified: boolean | null
    createdAt: Date | null
  }

  export type AuthModelMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    image: string | null
    imageID: string | null
    token: string | null
    verified: boolean | null
    createdAt: Date | null
  }

  export type AuthModelCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    image: number
    imageID: number
    token: number
    verified: number
    friends: number
    requests: number
    createdAt: number
    _all: number
  }


  export type AuthModelMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    image?: true
    imageID?: true
    token?: true
    verified?: true
    createdAt?: true
  }

  export type AuthModelMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    image?: true
    imageID?: true
    token?: true
    verified?: true
    createdAt?: true
  }

  export type AuthModelCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    image?: true
    imageID?: true
    token?: true
    verified?: true
    friends?: true
    requests?: true
    createdAt?: true
    _all?: true
  }

  export type AuthModelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which authModel to aggregate.
     */
    where?: authModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authModels to fetch.
     */
    orderBy?: authModelOrderByWithRelationInput | authModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: authModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned authModels
    **/
    _count?: true | AuthModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthModelMaxAggregateInputType
  }

  export type GetAuthModelAggregateType<T extends AuthModelAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthModel[P]>
      : GetScalarType<T[P], AggregateAuthModel[P]>
  }




  export type authModelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: authModelWhereInput
    orderBy?: authModelOrderByWithAggregationInput | authModelOrderByWithAggregationInput[]
    by: AuthModelScalarFieldEnum[] | AuthModelScalarFieldEnum
    having?: authModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthModelCountAggregateInputType | true
    _min?: AuthModelMinAggregateInputType
    _max?: AuthModelMaxAggregateInputType
  }

  export type AuthModelGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    image: string | null
    imageID: string | null
    token: string
    verified: boolean
    friends: JsonValue | null
    requests: JsonValue | null
    createdAt: Date
    _count: AuthModelCountAggregateOutputType | null
    _min: AuthModelMinAggregateOutputType | null
    _max: AuthModelMaxAggregateOutputType | null
  }

  type GetAuthModelGroupByPayload<T extends authModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthModelGroupByOutputType[P]>
            : GetScalarType<T[P], AuthModelGroupByOutputType[P]>
        }
      >
    >


  export type authModelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
    imageID?: boolean
    token?: boolean
    verified?: boolean
    friends?: boolean
    requests?: boolean
    createdAt?: boolean
    posts?: boolean | authModel$postsArgs<ExtArgs>
    _count?: boolean | AuthModelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["authModel"]>

  export type authModelSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
    imageID?: boolean
    token?: boolean
    verified?: boolean
    friends?: boolean
    requests?: boolean
    createdAt?: boolean
  }

  export type authModelInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    posts?: boolean | authModel$postsArgs<ExtArgs>
    _count?: boolean | AuthModelCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $authModelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "authModel"
    objects: {
      posts: Prisma.$postModelPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string
      email: string
      password: string
      image: string | null
      imageID: string | null
      token: string
      verified: boolean
      friends: Prisma.JsonValue | null
      requests: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["authModel"]>
    composites: {}
  }


  type authModelGetPayload<S extends boolean | null | undefined | authModelDefaultArgs> = $Result.GetResult<Prisma.$authModelPayload, S>

  type authModelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<authModelFindManyArgs, 'select' | 'include'> & {
      select?: AuthModelCountAggregateInputType | true
    }

  export interface authModelDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['authModel'], meta: { name: 'authModel' } }
    /**
     * Find zero or one AuthModel that matches the filter.
     * @param {authModelFindUniqueArgs} args - Arguments to find a AuthModel
     * @example
     * // Get one AuthModel
     * const authModel = await prisma.authModel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends authModelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, authModelFindUniqueArgs<ExtArgs>>
    ): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AuthModel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {authModelFindUniqueOrThrowArgs} args - Arguments to find a AuthModel
     * @example
     * // Get one AuthModel
     * const authModel = await prisma.authModel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends authModelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, authModelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AuthModel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authModelFindFirstArgs} args - Arguments to find a AuthModel
     * @example
     * // Get one AuthModel
     * const authModel = await prisma.authModel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends authModelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, authModelFindFirstArgs<ExtArgs>>
    ): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AuthModel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authModelFindFirstOrThrowArgs} args - Arguments to find a AuthModel
     * @example
     * // Get one AuthModel
     * const authModel = await prisma.authModel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends authModelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, authModelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AuthModels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authModelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuthModels
     * const authModels = await prisma.authModel.findMany()
     * 
     * // Get first 10 AuthModels
     * const authModels = await prisma.authModel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authModelWithIdOnly = await prisma.authModel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends authModelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, authModelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AuthModel.
     * @param {authModelCreateArgs} args - Arguments to create a AuthModel.
     * @example
     * // Create one AuthModel
     * const AuthModel = await prisma.authModel.create({
     *   data: {
     *     // ... data to create a AuthModel
     *   }
     * })
     * 
    **/
    create<T extends authModelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, authModelCreateArgs<ExtArgs>>
    ): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AuthModels.
     *     @param {authModelCreateManyArgs} args - Arguments to create many AuthModels.
     *     @example
     *     // Create many AuthModels
     *     const authModel = await prisma.authModel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends authModelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, authModelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AuthModel.
     * @param {authModelDeleteArgs} args - Arguments to delete one AuthModel.
     * @example
     * // Delete one AuthModel
     * const AuthModel = await prisma.authModel.delete({
     *   where: {
     *     // ... filter to delete one AuthModel
     *   }
     * })
     * 
    **/
    delete<T extends authModelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, authModelDeleteArgs<ExtArgs>>
    ): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AuthModel.
     * @param {authModelUpdateArgs} args - Arguments to update one AuthModel.
     * @example
     * // Update one AuthModel
     * const authModel = await prisma.authModel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends authModelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, authModelUpdateArgs<ExtArgs>>
    ): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AuthModels.
     * @param {authModelDeleteManyArgs} args - Arguments to filter AuthModels to delete.
     * @example
     * // Delete a few AuthModels
     * const { count } = await prisma.authModel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends authModelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, authModelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuthModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuthModels
     * const authModel = await prisma.authModel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends authModelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, authModelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuthModel.
     * @param {authModelUpsertArgs} args - Arguments to update or create a AuthModel.
     * @example
     * // Update or create a AuthModel
     * const authModel = await prisma.authModel.upsert({
     *   create: {
     *     // ... data to create a AuthModel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuthModel we want to update
     *   }
     * })
    **/
    upsert<T extends authModelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, authModelUpsertArgs<ExtArgs>>
    ): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AuthModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authModelCountArgs} args - Arguments to filter AuthModels to count.
     * @example
     * // Count the number of AuthModels
     * const count = await prisma.authModel.count({
     *   where: {
     *     // ... the filter for the AuthModels we want to count
     *   }
     * })
    **/
    count<T extends authModelCountArgs>(
      args?: Subset<T, authModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuthModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthModelAggregateArgs>(args: Subset<T, AuthModelAggregateArgs>): Prisma.PrismaPromise<GetAuthModelAggregateType<T>>

    /**
     * Group by AuthModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends authModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: authModelGroupByArgs['orderBy'] }
        : { orderBy?: authModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, authModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the authModel model
   */
  readonly fields: authModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for authModel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__authModelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    posts<T extends authModel$postsArgs<ExtArgs> = {}>(args?: Subset<T, authModel$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$postModelPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the authModel model
   */ 
  interface authModelFieldRefs {
    readonly id: FieldRef<"authModel", 'String'>
    readonly name: FieldRef<"authModel", 'String'>
    readonly email: FieldRef<"authModel", 'String'>
    readonly password: FieldRef<"authModel", 'String'>
    readonly image: FieldRef<"authModel", 'String'>
    readonly imageID: FieldRef<"authModel", 'String'>
    readonly token: FieldRef<"authModel", 'String'>
    readonly verified: FieldRef<"authModel", 'Boolean'>
    readonly friends: FieldRef<"authModel", 'Json'>
    readonly requests: FieldRef<"authModel", 'Json'>
    readonly createdAt: FieldRef<"authModel", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * authModel findUnique
   */
  export type authModelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * Filter, which authModel to fetch.
     */
    where: authModelWhereUniqueInput
  }


  /**
   * authModel findUniqueOrThrow
   */
  export type authModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * Filter, which authModel to fetch.
     */
    where: authModelWhereUniqueInput
  }


  /**
   * authModel findFirst
   */
  export type authModelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * Filter, which authModel to fetch.
     */
    where?: authModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authModels to fetch.
     */
    orderBy?: authModelOrderByWithRelationInput | authModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for authModels.
     */
    cursor?: authModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of authModels.
     */
    distinct?: AuthModelScalarFieldEnum | AuthModelScalarFieldEnum[]
  }


  /**
   * authModel findFirstOrThrow
   */
  export type authModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * Filter, which authModel to fetch.
     */
    where?: authModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authModels to fetch.
     */
    orderBy?: authModelOrderByWithRelationInput | authModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for authModels.
     */
    cursor?: authModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of authModels.
     */
    distinct?: AuthModelScalarFieldEnum | AuthModelScalarFieldEnum[]
  }


  /**
   * authModel findMany
   */
  export type authModelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * Filter, which authModels to fetch.
     */
    where?: authModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authModels to fetch.
     */
    orderBy?: authModelOrderByWithRelationInput | authModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing authModels.
     */
    cursor?: authModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authModels.
     */
    skip?: number
    distinct?: AuthModelScalarFieldEnum | AuthModelScalarFieldEnum[]
  }


  /**
   * authModel create
   */
  export type authModelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * The data needed to create a authModel.
     */
    data: XOR<authModelCreateInput, authModelUncheckedCreateInput>
  }


  /**
   * authModel createMany
   */
  export type authModelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many authModels.
     */
    data: authModelCreateManyInput | authModelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * authModel update
   */
  export type authModelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * The data needed to update a authModel.
     */
    data: XOR<authModelUpdateInput, authModelUncheckedUpdateInput>
    /**
     * Choose, which authModel to update.
     */
    where: authModelWhereUniqueInput
  }


  /**
   * authModel updateMany
   */
  export type authModelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update authModels.
     */
    data: XOR<authModelUpdateManyMutationInput, authModelUncheckedUpdateManyInput>
    /**
     * Filter which authModels to update
     */
    where?: authModelWhereInput
  }


  /**
   * authModel upsert
   */
  export type authModelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * The filter to search for the authModel to update in case it exists.
     */
    where: authModelWhereUniqueInput
    /**
     * In case the authModel found by the `where` argument doesn't exist, create a new authModel with this data.
     */
    create: XOR<authModelCreateInput, authModelUncheckedCreateInput>
    /**
     * In case the authModel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<authModelUpdateInput, authModelUncheckedUpdateInput>
  }


  /**
   * authModel delete
   */
  export type authModelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * Filter which authModel to delete.
     */
    where: authModelWhereUniqueInput
  }


  /**
   * authModel deleteMany
   */
  export type authModelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which authModels to delete
     */
    where?: authModelWhereInput
  }


  /**
   * authModel.posts
   */
  export type authModel$postsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postModel
     */
    select?: postModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postModelInclude<ExtArgs> | null
    where?: postModelWhereInput
    orderBy?: postModelOrderByWithRelationInput | postModelOrderByWithRelationInput[]
    cursor?: postModelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostModelScalarFieldEnum | PostModelScalarFieldEnum[]
  }


  /**
   * authModel without action
   */
  export type authModelDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
  }



  /**
   * Model postModel
   */

  export type AggregatePostModel = {
    _count: PostModelCountAggregateOutputType | null
    _min: PostModelMinAggregateOutputType | null
    _max: PostModelMaxAggregateOutputType | null
  }

  export type PostModelMinAggregateOutputType = {
    id: string | null
    message: string | null
    image: string | null
    imageID: string | null
    userID: string | null
    createdAt: Date | null
  }

  export type PostModelMaxAggregateOutputType = {
    id: string | null
    message: string | null
    image: string | null
    imageID: string | null
    userID: string | null
    createdAt: Date | null
  }

  export type PostModelCountAggregateOutputType = {
    id: number
    message: number
    image: number
    imageID: number
    likes: number
    comments: number
    userID: number
    createdAt: number
    _all: number
  }


  export type PostModelMinAggregateInputType = {
    id?: true
    message?: true
    image?: true
    imageID?: true
    userID?: true
    createdAt?: true
  }

  export type PostModelMaxAggregateInputType = {
    id?: true
    message?: true
    image?: true
    imageID?: true
    userID?: true
    createdAt?: true
  }

  export type PostModelCountAggregateInputType = {
    id?: true
    message?: true
    image?: true
    imageID?: true
    likes?: true
    comments?: true
    userID?: true
    createdAt?: true
    _all?: true
  }

  export type PostModelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which postModel to aggregate.
     */
    where?: postModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of postModels to fetch.
     */
    orderBy?: postModelOrderByWithRelationInput | postModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: postModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` postModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` postModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned postModels
    **/
    _count?: true | PostModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostModelMaxAggregateInputType
  }

  export type GetPostModelAggregateType<T extends PostModelAggregateArgs> = {
        [P in keyof T & keyof AggregatePostModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostModel[P]>
      : GetScalarType<T[P], AggregatePostModel[P]>
  }




  export type postModelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: postModelWhereInput
    orderBy?: postModelOrderByWithAggregationInput | postModelOrderByWithAggregationInput[]
    by: PostModelScalarFieldEnum[] | PostModelScalarFieldEnum
    having?: postModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostModelCountAggregateInputType | true
    _min?: PostModelMinAggregateInputType
    _max?: PostModelMaxAggregateInputType
  }

  export type PostModelGroupByOutputType = {
    id: string
    message: string
    image: string
    imageID: string
    likes: JsonValue | null
    comments: JsonValue | null
    userID: string
    createdAt: Date
    _count: PostModelCountAggregateOutputType | null
    _min: PostModelMinAggregateOutputType | null
    _max: PostModelMaxAggregateOutputType | null
  }

  type GetPostModelGroupByPayload<T extends postModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostModelGroupByOutputType[P]>
            : GetScalarType<T[P], PostModelGroupByOutputType[P]>
        }
      >
    >


  export type postModelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    image?: boolean
    imageID?: boolean
    likes?: boolean
    comments?: boolean
    userID?: boolean
    createdAt?: boolean
    user?: boolean | authModelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postModel"]>

  export type postModelSelectScalar = {
    id?: boolean
    message?: boolean
    image?: boolean
    imageID?: boolean
    likes?: boolean
    comments?: boolean
    userID?: boolean
    createdAt?: boolean
  }

  export type postModelInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | authModelDefaultArgs<ExtArgs>
  }


  export type $postModelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "postModel"
    objects: {
      user: Prisma.$authModelPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      message: string
      image: string
      imageID: string
      likes: Prisma.JsonValue | null
      comments: Prisma.JsonValue | null
      userID: string
      createdAt: Date
    }, ExtArgs["result"]["postModel"]>
    composites: {}
  }


  type postModelGetPayload<S extends boolean | null | undefined | postModelDefaultArgs> = $Result.GetResult<Prisma.$postModelPayload, S>

  type postModelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<postModelFindManyArgs, 'select' | 'include'> & {
      select?: PostModelCountAggregateInputType | true
    }

  export interface postModelDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['postModel'], meta: { name: 'postModel' } }
    /**
     * Find zero or one PostModel that matches the filter.
     * @param {postModelFindUniqueArgs} args - Arguments to find a PostModel
     * @example
     * // Get one PostModel
     * const postModel = await prisma.postModel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends postModelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, postModelFindUniqueArgs<ExtArgs>>
    ): Prisma__postModelClient<$Result.GetResult<Prisma.$postModelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PostModel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {postModelFindUniqueOrThrowArgs} args - Arguments to find a PostModel
     * @example
     * // Get one PostModel
     * const postModel = await prisma.postModel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends postModelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, postModelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__postModelClient<$Result.GetResult<Prisma.$postModelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PostModel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postModelFindFirstArgs} args - Arguments to find a PostModel
     * @example
     * // Get one PostModel
     * const postModel = await prisma.postModel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends postModelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, postModelFindFirstArgs<ExtArgs>>
    ): Prisma__postModelClient<$Result.GetResult<Prisma.$postModelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PostModel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postModelFindFirstOrThrowArgs} args - Arguments to find a PostModel
     * @example
     * // Get one PostModel
     * const postModel = await prisma.postModel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends postModelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, postModelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__postModelClient<$Result.GetResult<Prisma.$postModelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PostModels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postModelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostModels
     * const postModels = await prisma.postModel.findMany()
     * 
     * // Get first 10 PostModels
     * const postModels = await prisma.postModel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postModelWithIdOnly = await prisma.postModel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends postModelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, postModelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$postModelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PostModel.
     * @param {postModelCreateArgs} args - Arguments to create a PostModel.
     * @example
     * // Create one PostModel
     * const PostModel = await prisma.postModel.create({
     *   data: {
     *     // ... data to create a PostModel
     *   }
     * })
     * 
    **/
    create<T extends postModelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, postModelCreateArgs<ExtArgs>>
    ): Prisma__postModelClient<$Result.GetResult<Prisma.$postModelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PostModels.
     *     @param {postModelCreateManyArgs} args - Arguments to create many PostModels.
     *     @example
     *     // Create many PostModels
     *     const postModel = await prisma.postModel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends postModelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, postModelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PostModel.
     * @param {postModelDeleteArgs} args - Arguments to delete one PostModel.
     * @example
     * // Delete one PostModel
     * const PostModel = await prisma.postModel.delete({
     *   where: {
     *     // ... filter to delete one PostModel
     *   }
     * })
     * 
    **/
    delete<T extends postModelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, postModelDeleteArgs<ExtArgs>>
    ): Prisma__postModelClient<$Result.GetResult<Prisma.$postModelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PostModel.
     * @param {postModelUpdateArgs} args - Arguments to update one PostModel.
     * @example
     * // Update one PostModel
     * const postModel = await prisma.postModel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends postModelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, postModelUpdateArgs<ExtArgs>>
    ): Prisma__postModelClient<$Result.GetResult<Prisma.$postModelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PostModels.
     * @param {postModelDeleteManyArgs} args - Arguments to filter PostModels to delete.
     * @example
     * // Delete a few PostModels
     * const { count } = await prisma.postModel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends postModelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, postModelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostModels
     * const postModel = await prisma.postModel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends postModelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, postModelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PostModel.
     * @param {postModelUpsertArgs} args - Arguments to update or create a PostModel.
     * @example
     * // Update or create a PostModel
     * const postModel = await prisma.postModel.upsert({
     *   create: {
     *     // ... data to create a PostModel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostModel we want to update
     *   }
     * })
    **/
    upsert<T extends postModelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, postModelUpsertArgs<ExtArgs>>
    ): Prisma__postModelClient<$Result.GetResult<Prisma.$postModelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PostModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postModelCountArgs} args - Arguments to filter PostModels to count.
     * @example
     * // Count the number of PostModels
     * const count = await prisma.postModel.count({
     *   where: {
     *     // ... the filter for the PostModels we want to count
     *   }
     * })
    **/
    count<T extends postModelCountArgs>(
      args?: Subset<T, postModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostModelAggregateArgs>(args: Subset<T, PostModelAggregateArgs>): Prisma.PrismaPromise<GetPostModelAggregateType<T>>

    /**
     * Group by PostModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends postModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: postModelGroupByArgs['orderBy'] }
        : { orderBy?: postModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, postModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the postModel model
   */
  readonly fields: postModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for postModel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__postModelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends authModelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, authModelDefaultArgs<ExtArgs>>): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the postModel model
   */ 
  interface postModelFieldRefs {
    readonly id: FieldRef<"postModel", 'String'>
    readonly message: FieldRef<"postModel", 'String'>
    readonly image: FieldRef<"postModel", 'String'>
    readonly imageID: FieldRef<"postModel", 'String'>
    readonly likes: FieldRef<"postModel", 'Json'>
    readonly comments: FieldRef<"postModel", 'Json'>
    readonly userID: FieldRef<"postModel", 'String'>
    readonly createdAt: FieldRef<"postModel", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * postModel findUnique
   */
  export type postModelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postModel
     */
    select?: postModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postModelInclude<ExtArgs> | null
    /**
     * Filter, which postModel to fetch.
     */
    where: postModelWhereUniqueInput
  }


  /**
   * postModel findUniqueOrThrow
   */
  export type postModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postModel
     */
    select?: postModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postModelInclude<ExtArgs> | null
    /**
     * Filter, which postModel to fetch.
     */
    where: postModelWhereUniqueInput
  }


  /**
   * postModel findFirst
   */
  export type postModelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postModel
     */
    select?: postModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postModelInclude<ExtArgs> | null
    /**
     * Filter, which postModel to fetch.
     */
    where?: postModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of postModels to fetch.
     */
    orderBy?: postModelOrderByWithRelationInput | postModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for postModels.
     */
    cursor?: postModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` postModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` postModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of postModels.
     */
    distinct?: PostModelScalarFieldEnum | PostModelScalarFieldEnum[]
  }


  /**
   * postModel findFirstOrThrow
   */
  export type postModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postModel
     */
    select?: postModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postModelInclude<ExtArgs> | null
    /**
     * Filter, which postModel to fetch.
     */
    where?: postModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of postModels to fetch.
     */
    orderBy?: postModelOrderByWithRelationInput | postModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for postModels.
     */
    cursor?: postModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` postModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` postModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of postModels.
     */
    distinct?: PostModelScalarFieldEnum | PostModelScalarFieldEnum[]
  }


  /**
   * postModel findMany
   */
  export type postModelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postModel
     */
    select?: postModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postModelInclude<ExtArgs> | null
    /**
     * Filter, which postModels to fetch.
     */
    where?: postModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of postModels to fetch.
     */
    orderBy?: postModelOrderByWithRelationInput | postModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing postModels.
     */
    cursor?: postModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` postModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` postModels.
     */
    skip?: number
    distinct?: PostModelScalarFieldEnum | PostModelScalarFieldEnum[]
  }


  /**
   * postModel create
   */
  export type postModelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postModel
     */
    select?: postModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postModelInclude<ExtArgs> | null
    /**
     * The data needed to create a postModel.
     */
    data: XOR<postModelCreateInput, postModelUncheckedCreateInput>
  }


  /**
   * postModel createMany
   */
  export type postModelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many postModels.
     */
    data: postModelCreateManyInput | postModelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * postModel update
   */
  export type postModelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postModel
     */
    select?: postModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postModelInclude<ExtArgs> | null
    /**
     * The data needed to update a postModel.
     */
    data: XOR<postModelUpdateInput, postModelUncheckedUpdateInput>
    /**
     * Choose, which postModel to update.
     */
    where: postModelWhereUniqueInput
  }


  /**
   * postModel updateMany
   */
  export type postModelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update postModels.
     */
    data: XOR<postModelUpdateManyMutationInput, postModelUncheckedUpdateManyInput>
    /**
     * Filter which postModels to update
     */
    where?: postModelWhereInput
  }


  /**
   * postModel upsert
   */
  export type postModelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postModel
     */
    select?: postModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postModelInclude<ExtArgs> | null
    /**
     * The filter to search for the postModel to update in case it exists.
     */
    where: postModelWhereUniqueInput
    /**
     * In case the postModel found by the `where` argument doesn't exist, create a new postModel with this data.
     */
    create: XOR<postModelCreateInput, postModelUncheckedCreateInput>
    /**
     * In case the postModel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<postModelUpdateInput, postModelUncheckedUpdateInput>
  }


  /**
   * postModel delete
   */
  export type postModelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postModel
     */
    select?: postModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postModelInclude<ExtArgs> | null
    /**
     * Filter which postModel to delete.
     */
    where: postModelWhereUniqueInput
  }


  /**
   * postModel deleteMany
   */
  export type postModelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which postModels to delete
     */
    where?: postModelWhereInput
  }


  /**
   * postModel without action
   */
  export type postModelDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postModel
     */
    select?: postModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: postModelInclude<ExtArgs> | null
  }



  /**
   * Model commentModel
   */

  export type AggregateCommentModel = {
    _count: CommentModelCountAggregateOutputType | null
    _min: CommentModelMinAggregateOutputType | null
    _max: CommentModelMaxAggregateOutputType | null
  }

  export type CommentModelMinAggregateOutputType = {
    id: string | null
    comment: string | null
    userID: string | null
    createdAt: Date | null
  }

  export type CommentModelMaxAggregateOutputType = {
    id: string | null
    comment: string | null
    userID: string | null
    createdAt: Date | null
  }

  export type CommentModelCountAggregateOutputType = {
    id: number
    comment: number
    likes: number
    replies: number
    userID: number
    createdAt: number
    _all: number
  }


  export type CommentModelMinAggregateInputType = {
    id?: true
    comment?: true
    userID?: true
    createdAt?: true
  }

  export type CommentModelMaxAggregateInputType = {
    id?: true
    comment?: true
    userID?: true
    createdAt?: true
  }

  export type CommentModelCountAggregateInputType = {
    id?: true
    comment?: true
    likes?: true
    replies?: true
    userID?: true
    createdAt?: true
    _all?: true
  }

  export type CommentModelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which commentModel to aggregate.
     */
    where?: commentModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentModels to fetch.
     */
    orderBy?: commentModelOrderByWithRelationInput | commentModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: commentModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned commentModels
    **/
    _count?: true | CommentModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentModelMaxAggregateInputType
  }

  export type GetCommentModelAggregateType<T extends CommentModelAggregateArgs> = {
        [P in keyof T & keyof AggregateCommentModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommentModel[P]>
      : GetScalarType<T[P], AggregateCommentModel[P]>
  }




  export type commentModelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: commentModelWhereInput
    orderBy?: commentModelOrderByWithAggregationInput | commentModelOrderByWithAggregationInput[]
    by: CommentModelScalarFieldEnum[] | CommentModelScalarFieldEnum
    having?: commentModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentModelCountAggregateInputType | true
    _min?: CommentModelMinAggregateInputType
    _max?: CommentModelMaxAggregateInputType
  }

  export type CommentModelGroupByOutputType = {
    id: string
    comment: string
    likes: JsonValue | null
    replies: JsonValue | null
    userID: string
    createdAt: Date
    _count: CommentModelCountAggregateOutputType | null
    _min: CommentModelMinAggregateOutputType | null
    _max: CommentModelMaxAggregateOutputType | null
  }

  type GetCommentModelGroupByPayload<T extends commentModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentModelGroupByOutputType[P]>
            : GetScalarType<T[P], CommentModelGroupByOutputType[P]>
        }
      >
    >


  export type commentModelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    comment?: boolean
    likes?: boolean
    replies?: boolean
    userID?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["commentModel"]>

  export type commentModelSelectScalar = {
    id?: boolean
    comment?: boolean
    likes?: boolean
    replies?: boolean
    userID?: boolean
    createdAt?: boolean
  }


  export type $commentModelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "commentModel"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      comment: string
      likes: Prisma.JsonValue | null
      replies: Prisma.JsonValue | null
      userID: string
      createdAt: Date
    }, ExtArgs["result"]["commentModel"]>
    composites: {}
  }


  type commentModelGetPayload<S extends boolean | null | undefined | commentModelDefaultArgs> = $Result.GetResult<Prisma.$commentModelPayload, S>

  type commentModelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<commentModelFindManyArgs, 'select' | 'include'> & {
      select?: CommentModelCountAggregateInputType | true
    }

  export interface commentModelDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['commentModel'], meta: { name: 'commentModel' } }
    /**
     * Find zero or one CommentModel that matches the filter.
     * @param {commentModelFindUniqueArgs} args - Arguments to find a CommentModel
     * @example
     * // Get one CommentModel
     * const commentModel = await prisma.commentModel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends commentModelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, commentModelFindUniqueArgs<ExtArgs>>
    ): Prisma__commentModelClient<$Result.GetResult<Prisma.$commentModelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CommentModel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {commentModelFindUniqueOrThrowArgs} args - Arguments to find a CommentModel
     * @example
     * // Get one CommentModel
     * const commentModel = await prisma.commentModel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends commentModelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, commentModelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__commentModelClient<$Result.GetResult<Prisma.$commentModelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CommentModel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentModelFindFirstArgs} args - Arguments to find a CommentModel
     * @example
     * // Get one CommentModel
     * const commentModel = await prisma.commentModel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends commentModelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, commentModelFindFirstArgs<ExtArgs>>
    ): Prisma__commentModelClient<$Result.GetResult<Prisma.$commentModelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CommentModel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentModelFindFirstOrThrowArgs} args - Arguments to find a CommentModel
     * @example
     * // Get one CommentModel
     * const commentModel = await prisma.commentModel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends commentModelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, commentModelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__commentModelClient<$Result.GetResult<Prisma.$commentModelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CommentModels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentModelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommentModels
     * const commentModels = await prisma.commentModel.findMany()
     * 
     * // Get first 10 CommentModels
     * const commentModels = await prisma.commentModel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentModelWithIdOnly = await prisma.commentModel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends commentModelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commentModelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentModelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CommentModel.
     * @param {commentModelCreateArgs} args - Arguments to create a CommentModel.
     * @example
     * // Create one CommentModel
     * const CommentModel = await prisma.commentModel.create({
     *   data: {
     *     // ... data to create a CommentModel
     *   }
     * })
     * 
    **/
    create<T extends commentModelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, commentModelCreateArgs<ExtArgs>>
    ): Prisma__commentModelClient<$Result.GetResult<Prisma.$commentModelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CommentModels.
     *     @param {commentModelCreateManyArgs} args - Arguments to create many CommentModels.
     *     @example
     *     // Create many CommentModels
     *     const commentModel = await prisma.commentModel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends commentModelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commentModelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CommentModel.
     * @param {commentModelDeleteArgs} args - Arguments to delete one CommentModel.
     * @example
     * // Delete one CommentModel
     * const CommentModel = await prisma.commentModel.delete({
     *   where: {
     *     // ... filter to delete one CommentModel
     *   }
     * })
     * 
    **/
    delete<T extends commentModelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, commentModelDeleteArgs<ExtArgs>>
    ): Prisma__commentModelClient<$Result.GetResult<Prisma.$commentModelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CommentModel.
     * @param {commentModelUpdateArgs} args - Arguments to update one CommentModel.
     * @example
     * // Update one CommentModel
     * const commentModel = await prisma.commentModel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends commentModelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, commentModelUpdateArgs<ExtArgs>>
    ): Prisma__commentModelClient<$Result.GetResult<Prisma.$commentModelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CommentModels.
     * @param {commentModelDeleteManyArgs} args - Arguments to filter CommentModels to delete.
     * @example
     * // Delete a few CommentModels
     * const { count } = await prisma.commentModel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends commentModelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commentModelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommentModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommentModels
     * const commentModel = await prisma.commentModel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends commentModelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, commentModelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommentModel.
     * @param {commentModelUpsertArgs} args - Arguments to update or create a CommentModel.
     * @example
     * // Update or create a CommentModel
     * const commentModel = await prisma.commentModel.upsert({
     *   create: {
     *     // ... data to create a CommentModel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommentModel we want to update
     *   }
     * })
    **/
    upsert<T extends commentModelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, commentModelUpsertArgs<ExtArgs>>
    ): Prisma__commentModelClient<$Result.GetResult<Prisma.$commentModelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CommentModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentModelCountArgs} args - Arguments to filter CommentModels to count.
     * @example
     * // Count the number of CommentModels
     * const count = await prisma.commentModel.count({
     *   where: {
     *     // ... the filter for the CommentModels we want to count
     *   }
     * })
    **/
    count<T extends commentModelCountArgs>(
      args?: Subset<T, commentModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommentModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentModelAggregateArgs>(args: Subset<T, CommentModelAggregateArgs>): Prisma.PrismaPromise<GetCommentModelAggregateType<T>>

    /**
     * Group by CommentModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends commentModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: commentModelGroupByArgs['orderBy'] }
        : { orderBy?: commentModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, commentModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the commentModel model
   */
  readonly fields: commentModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for commentModel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__commentModelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the commentModel model
   */ 
  interface commentModelFieldRefs {
    readonly id: FieldRef<"commentModel", 'String'>
    readonly comment: FieldRef<"commentModel", 'String'>
    readonly likes: FieldRef<"commentModel", 'Json'>
    readonly replies: FieldRef<"commentModel", 'Json'>
    readonly userID: FieldRef<"commentModel", 'String'>
    readonly createdAt: FieldRef<"commentModel", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * commentModel findUnique
   */
  export type commentModelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentModel
     */
    select?: commentModelSelect<ExtArgs> | null
    /**
     * Filter, which commentModel to fetch.
     */
    where: commentModelWhereUniqueInput
  }


  /**
   * commentModel findUniqueOrThrow
   */
  export type commentModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentModel
     */
    select?: commentModelSelect<ExtArgs> | null
    /**
     * Filter, which commentModel to fetch.
     */
    where: commentModelWhereUniqueInput
  }


  /**
   * commentModel findFirst
   */
  export type commentModelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentModel
     */
    select?: commentModelSelect<ExtArgs> | null
    /**
     * Filter, which commentModel to fetch.
     */
    where?: commentModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentModels to fetch.
     */
    orderBy?: commentModelOrderByWithRelationInput | commentModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for commentModels.
     */
    cursor?: commentModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of commentModels.
     */
    distinct?: CommentModelScalarFieldEnum | CommentModelScalarFieldEnum[]
  }


  /**
   * commentModel findFirstOrThrow
   */
  export type commentModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentModel
     */
    select?: commentModelSelect<ExtArgs> | null
    /**
     * Filter, which commentModel to fetch.
     */
    where?: commentModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentModels to fetch.
     */
    orderBy?: commentModelOrderByWithRelationInput | commentModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for commentModels.
     */
    cursor?: commentModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of commentModels.
     */
    distinct?: CommentModelScalarFieldEnum | CommentModelScalarFieldEnum[]
  }


  /**
   * commentModel findMany
   */
  export type commentModelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentModel
     */
    select?: commentModelSelect<ExtArgs> | null
    /**
     * Filter, which commentModels to fetch.
     */
    where?: commentModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentModels to fetch.
     */
    orderBy?: commentModelOrderByWithRelationInput | commentModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing commentModels.
     */
    cursor?: commentModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentModels.
     */
    skip?: number
    distinct?: CommentModelScalarFieldEnum | CommentModelScalarFieldEnum[]
  }


  /**
   * commentModel create
   */
  export type commentModelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentModel
     */
    select?: commentModelSelect<ExtArgs> | null
    /**
     * The data needed to create a commentModel.
     */
    data: XOR<commentModelCreateInput, commentModelUncheckedCreateInput>
  }


  /**
   * commentModel createMany
   */
  export type commentModelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many commentModels.
     */
    data: commentModelCreateManyInput | commentModelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * commentModel update
   */
  export type commentModelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentModel
     */
    select?: commentModelSelect<ExtArgs> | null
    /**
     * The data needed to update a commentModel.
     */
    data: XOR<commentModelUpdateInput, commentModelUncheckedUpdateInput>
    /**
     * Choose, which commentModel to update.
     */
    where: commentModelWhereUniqueInput
  }


  /**
   * commentModel updateMany
   */
  export type commentModelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update commentModels.
     */
    data: XOR<commentModelUpdateManyMutationInput, commentModelUncheckedUpdateManyInput>
    /**
     * Filter which commentModels to update
     */
    where?: commentModelWhereInput
  }


  /**
   * commentModel upsert
   */
  export type commentModelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentModel
     */
    select?: commentModelSelect<ExtArgs> | null
    /**
     * The filter to search for the commentModel to update in case it exists.
     */
    where: commentModelWhereUniqueInput
    /**
     * In case the commentModel found by the `where` argument doesn't exist, create a new commentModel with this data.
     */
    create: XOR<commentModelCreateInput, commentModelUncheckedCreateInput>
    /**
     * In case the commentModel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<commentModelUpdateInput, commentModelUncheckedUpdateInput>
  }


  /**
   * commentModel delete
   */
  export type commentModelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentModel
     */
    select?: commentModelSelect<ExtArgs> | null
    /**
     * Filter which commentModel to delete.
     */
    where: commentModelWhereUniqueInput
  }


  /**
   * commentModel deleteMany
   */
  export type commentModelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which commentModels to delete
     */
    where?: commentModelWhereInput
  }


  /**
   * commentModel without action
   */
  export type commentModelDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentModel
     */
    select?: commentModelSelect<ExtArgs> | null
  }



  /**
   * Model replyModel
   */

  export type AggregateReplyModel = {
    _count: ReplyModelCountAggregateOutputType | null
    _min: ReplyModelMinAggregateOutputType | null
    _max: ReplyModelMaxAggregateOutputType | null
  }

  export type ReplyModelMinAggregateOutputType = {
    id: string | null
    reply: string | null
    userID: string | null
    createdAt: Date | null
  }

  export type ReplyModelMaxAggregateOutputType = {
    id: string | null
    reply: string | null
    userID: string | null
    createdAt: Date | null
  }

  export type ReplyModelCountAggregateOutputType = {
    id: number
    reply: number
    likes: number
    userID: number
    createdAt: number
    _all: number
  }


  export type ReplyModelMinAggregateInputType = {
    id?: true
    reply?: true
    userID?: true
    createdAt?: true
  }

  export type ReplyModelMaxAggregateInputType = {
    id?: true
    reply?: true
    userID?: true
    createdAt?: true
  }

  export type ReplyModelCountAggregateInputType = {
    id?: true
    reply?: true
    likes?: true
    userID?: true
    createdAt?: true
    _all?: true
  }

  export type ReplyModelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which replyModel to aggregate.
     */
    where?: replyModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of replyModels to fetch.
     */
    orderBy?: replyModelOrderByWithRelationInput | replyModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: replyModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` replyModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` replyModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned replyModels
    **/
    _count?: true | ReplyModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReplyModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReplyModelMaxAggregateInputType
  }

  export type GetReplyModelAggregateType<T extends ReplyModelAggregateArgs> = {
        [P in keyof T & keyof AggregateReplyModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReplyModel[P]>
      : GetScalarType<T[P], AggregateReplyModel[P]>
  }




  export type replyModelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: replyModelWhereInput
    orderBy?: replyModelOrderByWithAggregationInput | replyModelOrderByWithAggregationInput[]
    by: ReplyModelScalarFieldEnum[] | ReplyModelScalarFieldEnum
    having?: replyModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReplyModelCountAggregateInputType | true
    _min?: ReplyModelMinAggregateInputType
    _max?: ReplyModelMaxAggregateInputType
  }

  export type ReplyModelGroupByOutputType = {
    id: string
    reply: string
    likes: JsonValue | null
    userID: string
    createdAt: Date
    _count: ReplyModelCountAggregateOutputType | null
    _min: ReplyModelMinAggregateOutputType | null
    _max: ReplyModelMaxAggregateOutputType | null
  }

  type GetReplyModelGroupByPayload<T extends replyModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReplyModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReplyModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReplyModelGroupByOutputType[P]>
            : GetScalarType<T[P], ReplyModelGroupByOutputType[P]>
        }
      >
    >


  export type replyModelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reply?: boolean
    likes?: boolean
    userID?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["replyModel"]>

  export type replyModelSelectScalar = {
    id?: boolean
    reply?: boolean
    likes?: boolean
    userID?: boolean
    createdAt?: boolean
  }


  export type $replyModelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "replyModel"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      reply: string
      likes: Prisma.JsonValue | null
      userID: string
      createdAt: Date
    }, ExtArgs["result"]["replyModel"]>
    composites: {}
  }


  type replyModelGetPayload<S extends boolean | null | undefined | replyModelDefaultArgs> = $Result.GetResult<Prisma.$replyModelPayload, S>

  type replyModelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<replyModelFindManyArgs, 'select' | 'include'> & {
      select?: ReplyModelCountAggregateInputType | true
    }

  export interface replyModelDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['replyModel'], meta: { name: 'replyModel' } }
    /**
     * Find zero or one ReplyModel that matches the filter.
     * @param {replyModelFindUniqueArgs} args - Arguments to find a ReplyModel
     * @example
     * // Get one ReplyModel
     * const replyModel = await prisma.replyModel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends replyModelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, replyModelFindUniqueArgs<ExtArgs>>
    ): Prisma__replyModelClient<$Result.GetResult<Prisma.$replyModelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ReplyModel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {replyModelFindUniqueOrThrowArgs} args - Arguments to find a ReplyModel
     * @example
     * // Get one ReplyModel
     * const replyModel = await prisma.replyModel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends replyModelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, replyModelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__replyModelClient<$Result.GetResult<Prisma.$replyModelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ReplyModel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {replyModelFindFirstArgs} args - Arguments to find a ReplyModel
     * @example
     * // Get one ReplyModel
     * const replyModel = await prisma.replyModel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends replyModelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, replyModelFindFirstArgs<ExtArgs>>
    ): Prisma__replyModelClient<$Result.GetResult<Prisma.$replyModelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ReplyModel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {replyModelFindFirstOrThrowArgs} args - Arguments to find a ReplyModel
     * @example
     * // Get one ReplyModel
     * const replyModel = await prisma.replyModel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends replyModelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, replyModelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__replyModelClient<$Result.GetResult<Prisma.$replyModelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ReplyModels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {replyModelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReplyModels
     * const replyModels = await prisma.replyModel.findMany()
     * 
     * // Get first 10 ReplyModels
     * const replyModels = await prisma.replyModel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const replyModelWithIdOnly = await prisma.replyModel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends replyModelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, replyModelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$replyModelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ReplyModel.
     * @param {replyModelCreateArgs} args - Arguments to create a ReplyModel.
     * @example
     * // Create one ReplyModel
     * const ReplyModel = await prisma.replyModel.create({
     *   data: {
     *     // ... data to create a ReplyModel
     *   }
     * })
     * 
    **/
    create<T extends replyModelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, replyModelCreateArgs<ExtArgs>>
    ): Prisma__replyModelClient<$Result.GetResult<Prisma.$replyModelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ReplyModels.
     *     @param {replyModelCreateManyArgs} args - Arguments to create many ReplyModels.
     *     @example
     *     // Create many ReplyModels
     *     const replyModel = await prisma.replyModel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends replyModelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, replyModelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ReplyModel.
     * @param {replyModelDeleteArgs} args - Arguments to delete one ReplyModel.
     * @example
     * // Delete one ReplyModel
     * const ReplyModel = await prisma.replyModel.delete({
     *   where: {
     *     // ... filter to delete one ReplyModel
     *   }
     * })
     * 
    **/
    delete<T extends replyModelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, replyModelDeleteArgs<ExtArgs>>
    ): Prisma__replyModelClient<$Result.GetResult<Prisma.$replyModelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ReplyModel.
     * @param {replyModelUpdateArgs} args - Arguments to update one ReplyModel.
     * @example
     * // Update one ReplyModel
     * const replyModel = await prisma.replyModel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends replyModelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, replyModelUpdateArgs<ExtArgs>>
    ): Prisma__replyModelClient<$Result.GetResult<Prisma.$replyModelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ReplyModels.
     * @param {replyModelDeleteManyArgs} args - Arguments to filter ReplyModels to delete.
     * @example
     * // Delete a few ReplyModels
     * const { count } = await prisma.replyModel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends replyModelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, replyModelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReplyModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {replyModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReplyModels
     * const replyModel = await prisma.replyModel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends replyModelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, replyModelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReplyModel.
     * @param {replyModelUpsertArgs} args - Arguments to update or create a ReplyModel.
     * @example
     * // Update or create a ReplyModel
     * const replyModel = await prisma.replyModel.upsert({
     *   create: {
     *     // ... data to create a ReplyModel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReplyModel we want to update
     *   }
     * })
    **/
    upsert<T extends replyModelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, replyModelUpsertArgs<ExtArgs>>
    ): Prisma__replyModelClient<$Result.GetResult<Prisma.$replyModelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ReplyModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {replyModelCountArgs} args - Arguments to filter ReplyModels to count.
     * @example
     * // Count the number of ReplyModels
     * const count = await prisma.replyModel.count({
     *   where: {
     *     // ... the filter for the ReplyModels we want to count
     *   }
     * })
    **/
    count<T extends replyModelCountArgs>(
      args?: Subset<T, replyModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReplyModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReplyModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReplyModelAggregateArgs>(args: Subset<T, ReplyModelAggregateArgs>): Prisma.PrismaPromise<GetReplyModelAggregateType<T>>

    /**
     * Group by ReplyModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {replyModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends replyModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: replyModelGroupByArgs['orderBy'] }
        : { orderBy?: replyModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, replyModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReplyModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the replyModel model
   */
  readonly fields: replyModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for replyModel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__replyModelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the replyModel model
   */ 
  interface replyModelFieldRefs {
    readonly id: FieldRef<"replyModel", 'String'>
    readonly reply: FieldRef<"replyModel", 'String'>
    readonly likes: FieldRef<"replyModel", 'Json'>
    readonly userID: FieldRef<"replyModel", 'String'>
    readonly createdAt: FieldRef<"replyModel", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * replyModel findUnique
   */
  export type replyModelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replyModel
     */
    select?: replyModelSelect<ExtArgs> | null
    /**
     * Filter, which replyModel to fetch.
     */
    where: replyModelWhereUniqueInput
  }


  /**
   * replyModel findUniqueOrThrow
   */
  export type replyModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replyModel
     */
    select?: replyModelSelect<ExtArgs> | null
    /**
     * Filter, which replyModel to fetch.
     */
    where: replyModelWhereUniqueInput
  }


  /**
   * replyModel findFirst
   */
  export type replyModelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replyModel
     */
    select?: replyModelSelect<ExtArgs> | null
    /**
     * Filter, which replyModel to fetch.
     */
    where?: replyModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of replyModels to fetch.
     */
    orderBy?: replyModelOrderByWithRelationInput | replyModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for replyModels.
     */
    cursor?: replyModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` replyModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` replyModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of replyModels.
     */
    distinct?: ReplyModelScalarFieldEnum | ReplyModelScalarFieldEnum[]
  }


  /**
   * replyModel findFirstOrThrow
   */
  export type replyModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replyModel
     */
    select?: replyModelSelect<ExtArgs> | null
    /**
     * Filter, which replyModel to fetch.
     */
    where?: replyModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of replyModels to fetch.
     */
    orderBy?: replyModelOrderByWithRelationInput | replyModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for replyModels.
     */
    cursor?: replyModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` replyModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` replyModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of replyModels.
     */
    distinct?: ReplyModelScalarFieldEnum | ReplyModelScalarFieldEnum[]
  }


  /**
   * replyModel findMany
   */
  export type replyModelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replyModel
     */
    select?: replyModelSelect<ExtArgs> | null
    /**
     * Filter, which replyModels to fetch.
     */
    where?: replyModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of replyModels to fetch.
     */
    orderBy?: replyModelOrderByWithRelationInput | replyModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing replyModels.
     */
    cursor?: replyModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` replyModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` replyModels.
     */
    skip?: number
    distinct?: ReplyModelScalarFieldEnum | ReplyModelScalarFieldEnum[]
  }


  /**
   * replyModel create
   */
  export type replyModelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replyModel
     */
    select?: replyModelSelect<ExtArgs> | null
    /**
     * The data needed to create a replyModel.
     */
    data: XOR<replyModelCreateInput, replyModelUncheckedCreateInput>
  }


  /**
   * replyModel createMany
   */
  export type replyModelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many replyModels.
     */
    data: replyModelCreateManyInput | replyModelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * replyModel update
   */
  export type replyModelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replyModel
     */
    select?: replyModelSelect<ExtArgs> | null
    /**
     * The data needed to update a replyModel.
     */
    data: XOR<replyModelUpdateInput, replyModelUncheckedUpdateInput>
    /**
     * Choose, which replyModel to update.
     */
    where: replyModelWhereUniqueInput
  }


  /**
   * replyModel updateMany
   */
  export type replyModelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update replyModels.
     */
    data: XOR<replyModelUpdateManyMutationInput, replyModelUncheckedUpdateManyInput>
    /**
     * Filter which replyModels to update
     */
    where?: replyModelWhereInput
  }


  /**
   * replyModel upsert
   */
  export type replyModelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replyModel
     */
    select?: replyModelSelect<ExtArgs> | null
    /**
     * The filter to search for the replyModel to update in case it exists.
     */
    where: replyModelWhereUniqueInput
    /**
     * In case the replyModel found by the `where` argument doesn't exist, create a new replyModel with this data.
     */
    create: XOR<replyModelCreateInput, replyModelUncheckedCreateInput>
    /**
     * In case the replyModel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<replyModelUpdateInput, replyModelUncheckedUpdateInput>
  }


  /**
   * replyModel delete
   */
  export type replyModelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replyModel
     */
    select?: replyModelSelect<ExtArgs> | null
    /**
     * Filter which replyModel to delete.
     */
    where: replyModelWhereUniqueInput
  }


  /**
   * replyModel deleteMany
   */
  export type replyModelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which replyModels to delete
     */
    where?: replyModelWhereInput
  }


  /**
   * replyModel without action
   */
  export type replyModelDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replyModel
     */
    select?: replyModelSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AuthModelScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    image: 'image',
    imageID: 'imageID',
    token: 'token',
    verified: 'verified',
    friends: 'friends',
    requests: 'requests',
    createdAt: 'createdAt'
  };

  export type AuthModelScalarFieldEnum = (typeof AuthModelScalarFieldEnum)[keyof typeof AuthModelScalarFieldEnum]


  export const PostModelScalarFieldEnum: {
    id: 'id',
    message: 'message',
    image: 'image',
    imageID: 'imageID',
    likes: 'likes',
    comments: 'comments',
    userID: 'userID',
    createdAt: 'createdAt'
  };

  export type PostModelScalarFieldEnum = (typeof PostModelScalarFieldEnum)[keyof typeof PostModelScalarFieldEnum]


  export const CommentModelScalarFieldEnum: {
    id: 'id',
    comment: 'comment',
    likes: 'likes',
    replies: 'replies',
    userID: 'userID',
    createdAt: 'createdAt'
  };

  export type CommentModelScalarFieldEnum = (typeof CommentModelScalarFieldEnum)[keyof typeof CommentModelScalarFieldEnum]


  export const ReplyModelScalarFieldEnum: {
    id: 'id',
    reply: 'reply',
    likes: 'likes',
    userID: 'userID',
    createdAt: 'createdAt'
  };

  export type ReplyModelScalarFieldEnum = (typeof ReplyModelScalarFieldEnum)[keyof typeof ReplyModelScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type authModelWhereInput = {
    AND?: authModelWhereInput | authModelWhereInput[]
    OR?: authModelWhereInput[]
    NOT?: authModelWhereInput | authModelWhereInput[]
    id?: StringFilter<"authModel"> | string
    name?: StringFilter<"authModel"> | string
    email?: StringFilter<"authModel"> | string
    password?: StringFilter<"authModel"> | string
    image?: StringNullableFilter<"authModel"> | string | null
    imageID?: StringNullableFilter<"authModel"> | string | null
    token?: StringFilter<"authModel"> | string
    verified?: BoolFilter<"authModel"> | boolean
    friends?: JsonNullableFilter<"authModel">
    requests?: JsonNullableFilter<"authModel">
    createdAt?: DateTimeFilter<"authModel"> | Date | string
    posts?: PostModelListRelationFilter
  }

  export type authModelOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrderInput | SortOrder
    imageID?: SortOrderInput | SortOrder
    token?: SortOrder
    verified?: SortOrder
    friends?: SortOrderInput | SortOrder
    requests?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    posts?: postModelOrderByRelationAggregateInput
  }

  export type authModelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: authModelWhereInput | authModelWhereInput[]
    OR?: authModelWhereInput[]
    NOT?: authModelWhereInput | authModelWhereInput[]
    name?: StringFilter<"authModel"> | string
    password?: StringFilter<"authModel"> | string
    image?: StringNullableFilter<"authModel"> | string | null
    imageID?: StringNullableFilter<"authModel"> | string | null
    token?: StringFilter<"authModel"> | string
    verified?: BoolFilter<"authModel"> | boolean
    friends?: JsonNullableFilter<"authModel">
    requests?: JsonNullableFilter<"authModel">
    createdAt?: DateTimeFilter<"authModel"> | Date | string
    posts?: PostModelListRelationFilter
  }, "id" | "email">

  export type authModelOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrderInput | SortOrder
    imageID?: SortOrderInput | SortOrder
    token?: SortOrder
    verified?: SortOrder
    friends?: SortOrderInput | SortOrder
    requests?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: authModelCountOrderByAggregateInput
    _max?: authModelMaxOrderByAggregateInput
    _min?: authModelMinOrderByAggregateInput
  }

  export type authModelScalarWhereWithAggregatesInput = {
    AND?: authModelScalarWhereWithAggregatesInput | authModelScalarWhereWithAggregatesInput[]
    OR?: authModelScalarWhereWithAggregatesInput[]
    NOT?: authModelScalarWhereWithAggregatesInput | authModelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"authModel"> | string
    name?: StringWithAggregatesFilter<"authModel"> | string
    email?: StringWithAggregatesFilter<"authModel"> | string
    password?: StringWithAggregatesFilter<"authModel"> | string
    image?: StringNullableWithAggregatesFilter<"authModel"> | string | null
    imageID?: StringNullableWithAggregatesFilter<"authModel"> | string | null
    token?: StringWithAggregatesFilter<"authModel"> | string
    verified?: BoolWithAggregatesFilter<"authModel"> | boolean
    friends?: JsonNullableWithAggregatesFilter<"authModel">
    requests?: JsonNullableWithAggregatesFilter<"authModel">
    createdAt?: DateTimeWithAggregatesFilter<"authModel"> | Date | string
  }

  export type postModelWhereInput = {
    AND?: postModelWhereInput | postModelWhereInput[]
    OR?: postModelWhereInput[]
    NOT?: postModelWhereInput | postModelWhereInput[]
    id?: StringFilter<"postModel"> | string
    message?: StringFilter<"postModel"> | string
    image?: StringFilter<"postModel"> | string
    imageID?: StringFilter<"postModel"> | string
    likes?: JsonNullableFilter<"postModel">
    comments?: JsonNullableFilter<"postModel">
    userID?: StringFilter<"postModel"> | string
    createdAt?: DateTimeFilter<"postModel"> | Date | string
    user?: XOR<AuthModelRelationFilter, authModelWhereInput>
  }

  export type postModelOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    image?: SortOrder
    imageID?: SortOrder
    likes?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
    user?: authModelOrderByWithRelationInput
  }

  export type postModelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: postModelWhereInput | postModelWhereInput[]
    OR?: postModelWhereInput[]
    NOT?: postModelWhereInput | postModelWhereInput[]
    message?: StringFilter<"postModel"> | string
    image?: StringFilter<"postModel"> | string
    imageID?: StringFilter<"postModel"> | string
    likes?: JsonNullableFilter<"postModel">
    comments?: JsonNullableFilter<"postModel">
    userID?: StringFilter<"postModel"> | string
    createdAt?: DateTimeFilter<"postModel"> | Date | string
    user?: XOR<AuthModelRelationFilter, authModelWhereInput>
  }, "id">

  export type postModelOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    image?: SortOrder
    imageID?: SortOrder
    likes?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
    _count?: postModelCountOrderByAggregateInput
    _max?: postModelMaxOrderByAggregateInput
    _min?: postModelMinOrderByAggregateInput
  }

  export type postModelScalarWhereWithAggregatesInput = {
    AND?: postModelScalarWhereWithAggregatesInput | postModelScalarWhereWithAggregatesInput[]
    OR?: postModelScalarWhereWithAggregatesInput[]
    NOT?: postModelScalarWhereWithAggregatesInput | postModelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"postModel"> | string
    message?: StringWithAggregatesFilter<"postModel"> | string
    image?: StringWithAggregatesFilter<"postModel"> | string
    imageID?: StringWithAggregatesFilter<"postModel"> | string
    likes?: JsonNullableWithAggregatesFilter<"postModel">
    comments?: JsonNullableWithAggregatesFilter<"postModel">
    userID?: StringWithAggregatesFilter<"postModel"> | string
    createdAt?: DateTimeWithAggregatesFilter<"postModel"> | Date | string
  }

  export type commentModelWhereInput = {
    AND?: commentModelWhereInput | commentModelWhereInput[]
    OR?: commentModelWhereInput[]
    NOT?: commentModelWhereInput | commentModelWhereInput[]
    id?: StringFilter<"commentModel"> | string
    comment?: StringFilter<"commentModel"> | string
    likes?: JsonNullableFilter<"commentModel">
    replies?: JsonNullableFilter<"commentModel">
    userID?: StringFilter<"commentModel"> | string
    createdAt?: DateTimeFilter<"commentModel"> | Date | string
  }

  export type commentModelOrderByWithRelationInput = {
    id?: SortOrder
    comment?: SortOrder
    likes?: SortOrderInput | SortOrder
    replies?: SortOrderInput | SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
  }

  export type commentModelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: commentModelWhereInput | commentModelWhereInput[]
    OR?: commentModelWhereInput[]
    NOT?: commentModelWhereInput | commentModelWhereInput[]
    comment?: StringFilter<"commentModel"> | string
    likes?: JsonNullableFilter<"commentModel">
    replies?: JsonNullableFilter<"commentModel">
    userID?: StringFilter<"commentModel"> | string
    createdAt?: DateTimeFilter<"commentModel"> | Date | string
  }, "id">

  export type commentModelOrderByWithAggregationInput = {
    id?: SortOrder
    comment?: SortOrder
    likes?: SortOrderInput | SortOrder
    replies?: SortOrderInput | SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
    _count?: commentModelCountOrderByAggregateInput
    _max?: commentModelMaxOrderByAggregateInput
    _min?: commentModelMinOrderByAggregateInput
  }

  export type commentModelScalarWhereWithAggregatesInput = {
    AND?: commentModelScalarWhereWithAggregatesInput | commentModelScalarWhereWithAggregatesInput[]
    OR?: commentModelScalarWhereWithAggregatesInput[]
    NOT?: commentModelScalarWhereWithAggregatesInput | commentModelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"commentModel"> | string
    comment?: StringWithAggregatesFilter<"commentModel"> | string
    likes?: JsonNullableWithAggregatesFilter<"commentModel">
    replies?: JsonNullableWithAggregatesFilter<"commentModel">
    userID?: StringWithAggregatesFilter<"commentModel"> | string
    createdAt?: DateTimeWithAggregatesFilter<"commentModel"> | Date | string
  }

  export type replyModelWhereInput = {
    AND?: replyModelWhereInput | replyModelWhereInput[]
    OR?: replyModelWhereInput[]
    NOT?: replyModelWhereInput | replyModelWhereInput[]
    id?: StringFilter<"replyModel"> | string
    reply?: StringFilter<"replyModel"> | string
    likes?: JsonNullableFilter<"replyModel">
    userID?: StringFilter<"replyModel"> | string
    createdAt?: DateTimeFilter<"replyModel"> | Date | string
  }

  export type replyModelOrderByWithRelationInput = {
    id?: SortOrder
    reply?: SortOrder
    likes?: SortOrderInput | SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
  }

  export type replyModelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: replyModelWhereInput | replyModelWhereInput[]
    OR?: replyModelWhereInput[]
    NOT?: replyModelWhereInput | replyModelWhereInput[]
    reply?: StringFilter<"replyModel"> | string
    likes?: JsonNullableFilter<"replyModel">
    userID?: StringFilter<"replyModel"> | string
    createdAt?: DateTimeFilter<"replyModel"> | Date | string
  }, "id">

  export type replyModelOrderByWithAggregationInput = {
    id?: SortOrder
    reply?: SortOrder
    likes?: SortOrderInput | SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
    _count?: replyModelCountOrderByAggregateInput
    _max?: replyModelMaxOrderByAggregateInput
    _min?: replyModelMinOrderByAggregateInput
  }

  export type replyModelScalarWhereWithAggregatesInput = {
    AND?: replyModelScalarWhereWithAggregatesInput | replyModelScalarWhereWithAggregatesInput[]
    OR?: replyModelScalarWhereWithAggregatesInput[]
    NOT?: replyModelScalarWhereWithAggregatesInput | replyModelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"replyModel"> | string
    reply?: StringWithAggregatesFilter<"replyModel"> | string
    likes?: JsonNullableWithAggregatesFilter<"replyModel">
    userID?: StringWithAggregatesFilter<"replyModel"> | string
    createdAt?: DateTimeWithAggregatesFilter<"replyModel"> | Date | string
  }

  export type authModelCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    image?: string | null
    imageID?: string | null
    token: string
    verified?: boolean
    friends?: NullableJsonNullValueInput | InputJsonValue
    requests?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    posts?: postModelCreateNestedManyWithoutUserInput
  }

  export type authModelUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    image?: string | null
    imageID?: string | null
    token: string
    verified?: boolean
    friends?: NullableJsonNullValueInput | InputJsonValue
    requests?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    posts?: postModelUncheckedCreateNestedManyWithoutUserInput
  }

  export type authModelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    friends?: NullableJsonNullValueInput | InputJsonValue
    requests?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: postModelUpdateManyWithoutUserNestedInput
  }

  export type authModelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    friends?: NullableJsonNullValueInput | InputJsonValue
    requests?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: postModelUncheckedUpdateManyWithoutUserNestedInput
  }

  export type authModelCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    image?: string | null
    imageID?: string | null
    token: string
    verified?: boolean
    friends?: NullableJsonNullValueInput | InputJsonValue
    requests?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type authModelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    friends?: NullableJsonNullValueInput | InputJsonValue
    requests?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authModelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    friends?: NullableJsonNullValueInput | InputJsonValue
    requests?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type postModelCreateInput = {
    id?: string
    message: string
    image: string
    imageID: string
    likes?: NullableJsonNullValueInput | InputJsonValue
    comments?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user: authModelCreateNestedOneWithoutPostsInput
  }

  export type postModelUncheckedCreateInput = {
    id?: string
    message: string
    image: string
    imageID: string
    likes?: NullableJsonNullValueInput | InputJsonValue
    comments?: NullableJsonNullValueInput | InputJsonValue
    userID: string
    createdAt?: Date | string
  }

  export type postModelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageID?: StringFieldUpdateOperationsInput | string
    likes?: NullableJsonNullValueInput | InputJsonValue
    comments?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: authModelUpdateOneRequiredWithoutPostsNestedInput
  }

  export type postModelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageID?: StringFieldUpdateOperationsInput | string
    likes?: NullableJsonNullValueInput | InputJsonValue
    comments?: NullableJsonNullValueInput | InputJsonValue
    userID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type postModelCreateManyInput = {
    id?: string
    message: string
    image: string
    imageID: string
    likes?: NullableJsonNullValueInput | InputJsonValue
    comments?: NullableJsonNullValueInput | InputJsonValue
    userID: string
    createdAt?: Date | string
  }

  export type postModelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageID?: StringFieldUpdateOperationsInput | string
    likes?: NullableJsonNullValueInput | InputJsonValue
    comments?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type postModelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageID?: StringFieldUpdateOperationsInput | string
    likes?: NullableJsonNullValueInput | InputJsonValue
    comments?: NullableJsonNullValueInput | InputJsonValue
    userID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commentModelCreateInput = {
    id?: string
    comment: string
    likes?: NullableJsonNullValueInput | InputJsonValue
    replies?: NullableJsonNullValueInput | InputJsonValue
    userID: string
    createdAt?: Date | string
  }

  export type commentModelUncheckedCreateInput = {
    id?: string
    comment: string
    likes?: NullableJsonNullValueInput | InputJsonValue
    replies?: NullableJsonNullValueInput | InputJsonValue
    userID: string
    createdAt?: Date | string
  }

  export type commentModelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    likes?: NullableJsonNullValueInput | InputJsonValue
    replies?: NullableJsonNullValueInput | InputJsonValue
    userID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commentModelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    likes?: NullableJsonNullValueInput | InputJsonValue
    replies?: NullableJsonNullValueInput | InputJsonValue
    userID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commentModelCreateManyInput = {
    id?: string
    comment: string
    likes?: NullableJsonNullValueInput | InputJsonValue
    replies?: NullableJsonNullValueInput | InputJsonValue
    userID: string
    createdAt?: Date | string
  }

  export type commentModelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    likes?: NullableJsonNullValueInput | InputJsonValue
    replies?: NullableJsonNullValueInput | InputJsonValue
    userID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commentModelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    likes?: NullableJsonNullValueInput | InputJsonValue
    replies?: NullableJsonNullValueInput | InputJsonValue
    userID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type replyModelCreateInput = {
    id?: string
    reply: string
    likes?: NullableJsonNullValueInput | InputJsonValue
    userID: string
    createdAt?: Date | string
  }

  export type replyModelUncheckedCreateInput = {
    id?: string
    reply: string
    likes?: NullableJsonNullValueInput | InputJsonValue
    userID: string
    createdAt?: Date | string
  }

  export type replyModelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reply?: StringFieldUpdateOperationsInput | string
    likes?: NullableJsonNullValueInput | InputJsonValue
    userID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type replyModelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reply?: StringFieldUpdateOperationsInput | string
    likes?: NullableJsonNullValueInput | InputJsonValue
    userID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type replyModelCreateManyInput = {
    id?: string
    reply: string
    likes?: NullableJsonNullValueInput | InputJsonValue
    userID: string
    createdAt?: Date | string
  }

  export type replyModelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reply?: StringFieldUpdateOperationsInput | string
    likes?: NullableJsonNullValueInput | InputJsonValue
    userID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type replyModelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reply?: StringFieldUpdateOperationsInput | string
    likes?: NullableJsonNullValueInput | InputJsonValue
    userID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PostModelListRelationFilter = {
    every?: postModelWhereInput
    some?: postModelWhereInput
    none?: postModelWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type postModelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type authModelCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    imageID?: SortOrder
    token?: SortOrder
    verified?: SortOrder
    friends?: SortOrder
    requests?: SortOrder
    createdAt?: SortOrder
  }

  export type authModelMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    imageID?: SortOrder
    token?: SortOrder
    verified?: SortOrder
    createdAt?: SortOrder
  }

  export type authModelMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    imageID?: SortOrder
    token?: SortOrder
    verified?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AuthModelRelationFilter = {
    is?: authModelWhereInput
    isNot?: authModelWhereInput
  }

  export type postModelCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    image?: SortOrder
    imageID?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
  }

  export type postModelMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    image?: SortOrder
    imageID?: SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
  }

  export type postModelMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    image?: SortOrder
    imageID?: SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
  }

  export type commentModelCountOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    likes?: SortOrder
    replies?: SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
  }

  export type commentModelMaxOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
  }

  export type commentModelMinOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
  }

  export type replyModelCountOrderByAggregateInput = {
    id?: SortOrder
    reply?: SortOrder
    likes?: SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
  }

  export type replyModelMaxOrderByAggregateInput = {
    id?: SortOrder
    reply?: SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
  }

  export type replyModelMinOrderByAggregateInput = {
    id?: SortOrder
    reply?: SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
  }

  export type postModelCreateNestedManyWithoutUserInput = {
    create?: XOR<postModelCreateWithoutUserInput, postModelUncheckedCreateWithoutUserInput> | postModelCreateWithoutUserInput[] | postModelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: postModelCreateOrConnectWithoutUserInput | postModelCreateOrConnectWithoutUserInput[]
    createMany?: postModelCreateManyUserInputEnvelope
    connect?: postModelWhereUniqueInput | postModelWhereUniqueInput[]
  }

  export type postModelUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<postModelCreateWithoutUserInput, postModelUncheckedCreateWithoutUserInput> | postModelCreateWithoutUserInput[] | postModelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: postModelCreateOrConnectWithoutUserInput | postModelCreateOrConnectWithoutUserInput[]
    createMany?: postModelCreateManyUserInputEnvelope
    connect?: postModelWhereUniqueInput | postModelWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type postModelUpdateManyWithoutUserNestedInput = {
    create?: XOR<postModelCreateWithoutUserInput, postModelUncheckedCreateWithoutUserInput> | postModelCreateWithoutUserInput[] | postModelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: postModelCreateOrConnectWithoutUserInput | postModelCreateOrConnectWithoutUserInput[]
    upsert?: postModelUpsertWithWhereUniqueWithoutUserInput | postModelUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: postModelCreateManyUserInputEnvelope
    set?: postModelWhereUniqueInput | postModelWhereUniqueInput[]
    disconnect?: postModelWhereUniqueInput | postModelWhereUniqueInput[]
    delete?: postModelWhereUniqueInput | postModelWhereUniqueInput[]
    connect?: postModelWhereUniqueInput | postModelWhereUniqueInput[]
    update?: postModelUpdateWithWhereUniqueWithoutUserInput | postModelUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: postModelUpdateManyWithWhereWithoutUserInput | postModelUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: postModelScalarWhereInput | postModelScalarWhereInput[]
  }

  export type postModelUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<postModelCreateWithoutUserInput, postModelUncheckedCreateWithoutUserInput> | postModelCreateWithoutUserInput[] | postModelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: postModelCreateOrConnectWithoutUserInput | postModelCreateOrConnectWithoutUserInput[]
    upsert?: postModelUpsertWithWhereUniqueWithoutUserInput | postModelUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: postModelCreateManyUserInputEnvelope
    set?: postModelWhereUniqueInput | postModelWhereUniqueInput[]
    disconnect?: postModelWhereUniqueInput | postModelWhereUniqueInput[]
    delete?: postModelWhereUniqueInput | postModelWhereUniqueInput[]
    connect?: postModelWhereUniqueInput | postModelWhereUniqueInput[]
    update?: postModelUpdateWithWhereUniqueWithoutUserInput | postModelUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: postModelUpdateManyWithWhereWithoutUserInput | postModelUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: postModelScalarWhereInput | postModelScalarWhereInput[]
  }

  export type authModelCreateNestedOneWithoutPostsInput = {
    create?: XOR<authModelCreateWithoutPostsInput, authModelUncheckedCreateWithoutPostsInput>
    connectOrCreate?: authModelCreateOrConnectWithoutPostsInput
    connect?: authModelWhereUniqueInput
  }

  export type authModelUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<authModelCreateWithoutPostsInput, authModelUncheckedCreateWithoutPostsInput>
    connectOrCreate?: authModelCreateOrConnectWithoutPostsInput
    upsert?: authModelUpsertWithoutPostsInput
    connect?: authModelWhereUniqueInput
    update?: XOR<XOR<authModelUpdateToOneWithWhereWithoutPostsInput, authModelUpdateWithoutPostsInput>, authModelUncheckedUpdateWithoutPostsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type postModelCreateWithoutUserInput = {
    id?: string
    message: string
    image: string
    imageID: string
    likes?: NullableJsonNullValueInput | InputJsonValue
    comments?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type postModelUncheckedCreateWithoutUserInput = {
    id?: string
    message: string
    image: string
    imageID: string
    likes?: NullableJsonNullValueInput | InputJsonValue
    comments?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type postModelCreateOrConnectWithoutUserInput = {
    where: postModelWhereUniqueInput
    create: XOR<postModelCreateWithoutUserInput, postModelUncheckedCreateWithoutUserInput>
  }

  export type postModelCreateManyUserInputEnvelope = {
    data: postModelCreateManyUserInput | postModelCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type postModelUpsertWithWhereUniqueWithoutUserInput = {
    where: postModelWhereUniqueInput
    update: XOR<postModelUpdateWithoutUserInput, postModelUncheckedUpdateWithoutUserInput>
    create: XOR<postModelCreateWithoutUserInput, postModelUncheckedCreateWithoutUserInput>
  }

  export type postModelUpdateWithWhereUniqueWithoutUserInput = {
    where: postModelWhereUniqueInput
    data: XOR<postModelUpdateWithoutUserInput, postModelUncheckedUpdateWithoutUserInput>
  }

  export type postModelUpdateManyWithWhereWithoutUserInput = {
    where: postModelScalarWhereInput
    data: XOR<postModelUpdateManyMutationInput, postModelUncheckedUpdateManyWithoutUserInput>
  }

  export type postModelScalarWhereInput = {
    AND?: postModelScalarWhereInput | postModelScalarWhereInput[]
    OR?: postModelScalarWhereInput[]
    NOT?: postModelScalarWhereInput | postModelScalarWhereInput[]
    id?: StringFilter<"postModel"> | string
    message?: StringFilter<"postModel"> | string
    image?: StringFilter<"postModel"> | string
    imageID?: StringFilter<"postModel"> | string
    likes?: JsonNullableFilter<"postModel">
    comments?: JsonNullableFilter<"postModel">
    userID?: StringFilter<"postModel"> | string
    createdAt?: DateTimeFilter<"postModel"> | Date | string
  }

  export type authModelCreateWithoutPostsInput = {
    id?: string
    name: string
    email: string
    password: string
    image?: string | null
    imageID?: string | null
    token: string
    verified?: boolean
    friends?: NullableJsonNullValueInput | InputJsonValue
    requests?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type authModelUncheckedCreateWithoutPostsInput = {
    id?: string
    name: string
    email: string
    password: string
    image?: string | null
    imageID?: string | null
    token: string
    verified?: boolean
    friends?: NullableJsonNullValueInput | InputJsonValue
    requests?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type authModelCreateOrConnectWithoutPostsInput = {
    where: authModelWhereUniqueInput
    create: XOR<authModelCreateWithoutPostsInput, authModelUncheckedCreateWithoutPostsInput>
  }

  export type authModelUpsertWithoutPostsInput = {
    update: XOR<authModelUpdateWithoutPostsInput, authModelUncheckedUpdateWithoutPostsInput>
    create: XOR<authModelCreateWithoutPostsInput, authModelUncheckedCreateWithoutPostsInput>
    where?: authModelWhereInput
  }

  export type authModelUpdateToOneWithWhereWithoutPostsInput = {
    where?: authModelWhereInput
    data: XOR<authModelUpdateWithoutPostsInput, authModelUncheckedUpdateWithoutPostsInput>
  }

  export type authModelUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    friends?: NullableJsonNullValueInput | InputJsonValue
    requests?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authModelUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    friends?: NullableJsonNullValueInput | InputJsonValue
    requests?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type postModelCreateManyUserInput = {
    id?: string
    message: string
    image: string
    imageID: string
    likes?: NullableJsonNullValueInput | InputJsonValue
    comments?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type postModelUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageID?: StringFieldUpdateOperationsInput | string
    likes?: NullableJsonNullValueInput | InputJsonValue
    comments?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type postModelUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageID?: StringFieldUpdateOperationsInput | string
    likes?: NullableJsonNullValueInput | InputJsonValue
    comments?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type postModelUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageID?: StringFieldUpdateOperationsInput | string
    likes?: NullableJsonNullValueInput | InputJsonValue
    comments?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AuthModelCountOutputTypeDefaultArgs instead
     */
    export type AuthModelCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AuthModelCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use authModelDefaultArgs instead
     */
    export type authModelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = authModelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use postModelDefaultArgs instead
     */
    export type postModelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = postModelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use commentModelDefaultArgs instead
     */
    export type commentModelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = commentModelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use replyModelDefaultArgs instead
     */
    export type replyModelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = replyModelDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}